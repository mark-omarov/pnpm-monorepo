name: Deploy

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy'
        required: true
        type: choice
        options:
          - all
          - srv-a
          - srv-b
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    name: Deploy to ${{ github.event_name == 'push' && 'development' || inputs.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event_name == 'push' && 'development' || inputs.environment }}

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Need at least 2 commits for --affected to work

      - name: Setup PNPM
        uses: pnpm/action-setup@v4.1.0

      - name: Setup Node
        uses: actions/setup-node@v4.3.0
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Prepare deployment for changed services
        if: github.event_name == 'push'
        run: |
          CHANGED_SERVICES=$(ENVIRONMENT=development pnpm turbo run prepare-deploy --affected --dry=json | jq -r '.tasks | map(.package) | join(",")')
          echo "CHANGED_SERVICES=${CHANGED_SERVICES}" >> $GITHUB_ENV
          echo "Detected changes in: ${CHANGED_SERVICES}"
          ENVIRONMENT=development pnpm turbo run prepare-deploy --affected

      - name: Prepare specific service deployment
        if: github.event_name == 'workflow_dispatch' && inputs.service != 'all'
        run: |
          echo "CHANGED_SERVICES=${{ inputs.service }}" >> $GITHUB_ENV
          ENVIRONMENT=${{ inputs.environment }} pnpm turbo run prepare-deploy --filter="${{ inputs.service }}"

      - name: Prepare all services deployment
        if: github.event_name == 'workflow_dispatch' && inputs.service == 'all'
        run: |
          SERVICES=$(ls -d services/* | xargs -n 1 basename | tr '\n' ',' | sed 's/,$//')
          echo "CHANGED_SERVICES=${SERVICES}" >> $GITHUB_ENV
          ENVIRONMENT=${{ inputs.environment }} pnpm turbo run prepare-deploy

      - name: Create infrastructure PRs
        run: |
          if [ -z "$CHANGED_SERVICES" ]; then
            echo "No services to deploy"
            exit 0
          fi

          # Environment setup
          ENVIRONMENT="${{ github.event_name == 'push' && 'development' || inputs.environment }}"

          # For each changed service, create a deployment PR
          for SERVICE in $(echo $CHANGED_SERVICES | tr ',' '\n'); do
            echo "Creating infrastructure PR for ${SERVICE} in ${ENVIRONMENT}"
            SERVICE_VERSION=$(jq -r '.version' services/${SERVICE}/package.json)
            echo "Service ${SERVICE} version: ${SERVICE_VERSION}"

            # Mock creating a PR in infrastructure repo
            # In a real scenario, you would:
            # 1. Clone the infrastructure repo
            # 2. Update the image tag for this service
            # 3. Create a PR with the changes
            echo "Would create PR to update ${SERVICE} to version ${SERVICE_VERSION} in ${ENVIRONMENT}"
          done
